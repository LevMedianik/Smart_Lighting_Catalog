# ==============================================================
# –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# AI Lighting Recommender + AI-–°–æ–≤–µ—Ç–Ω–∏–∫ + Frontend
# ==============================================================

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
import os
import logging

from app.schemas import RoomInput
from app.recommend import recommend_luminaires as recommend
from app.advisor import generate_advice
from app.advisor_chat import router as chat_router

# --------------------------------------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
# --------------------------------------------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

# --------------------------------------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# --------------------------------------------------------------
app = FastAPI(
    title="AI Lighting Recommender",
    version="1.0",
    description="–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–±–æ—Ä–∞ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞ –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."
)

# --------------------------------------------------------------
# CORS (—Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
# --------------------------------------------------------------
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://127.0.0.1:5500",
        "http://localhost:5500",
        "https://smart-lighting.onrender.com"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --------------------------------------------------------------
# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä AI-—Å–æ–≤–µ—Ç–Ω–∏–∫–∞ (—á–∞—Ç)
# --------------------------------------------------------------
app.include_router(
    chat_router,
    prefix="",
    tags=["AI-—Å–æ–≤–µ—Ç–Ω–∏–∫"],
)

# --------------------------------------------------------------
# –ü–æ–¥–∫–ª—é—á–∞–µ–º FRONTEND
# --------------------------------------------------------------
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ frontend
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
FRONTEND_DIR = os.path.join(BASE_DIR, "../frontend")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
if not os.path.exists(FRONTEND_DIR):
    logger.warning("‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")
else:
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    app.mount("/assets", StaticFiles(directory=os.path.join(FRONTEND_DIR, "assets")), name="assets")

    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ index.html
    @app.get("/", response_class=FileResponse)
    async def serve_index():
        index_path = os.path.join(FRONTEND_DIR, "index.html")
        return FileResponse(index_path)

# --------------------------------------------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
# --------------------------------------------------------------
@app.get("/health")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "ok"}

# --------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
# --------------------------------------------------------------
@app.post("/recommend")
def get_recommendations(room: RoomInput):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è (RoomInput),
    –≤—ã–∑—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ AI-—Å–æ–≤–µ—Ç–Ω–∏–∫ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞.
    """
    try:
        # üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        room_dict = room.model_dump()
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {room_dict}")

        # üîπ –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        results = recommend(room_dict)
        if not results:
            raise ValueError("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.")

        # üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if isinstance(results, dict):
            recommendations, summary = [], ""
            if "recommendations" in results:
                if isinstance(results["recommendations"], list):
                    recommendations = results["recommendations"]
                    summary = results.get("summary", "")
                elif isinstance(results["recommendations"], dict):
                    recommendations = results["recommendations"].get("recommendations", [])
                    summary = results["recommendations"].get("summary", "")
        else:
            recommendations, summary = [], ""

        # üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        advice = generate_advice(recommendations, room_dict)

        logger.info("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.")
        return {
            "recommendations": recommendations,
            "summary": summary,
            "advice": advice
        }

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞:")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {e}")


# --------------------------------------------------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
# --------------------------------------------------------------
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app.main:app", host="0.0.0.0", port=8000, reload=True)
