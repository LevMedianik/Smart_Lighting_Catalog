import os
import logging
import pandas as pd
import numpy as np
import joblib

from app.schemas import RoomInput

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------------
# –ü—É—Ç–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
# -------------------------
MODEL_PATH = os.getenv("MODEL_PATH", "ml/best_model.pkl")
PREPROCESSOR_PATH = os.getenv("PREPROCESSOR_PATH", "ml/preprocessor.pkl")
FIXTURES_PATH = os.getenv("FIXTURES_PATH", "data/fixtures.csv")
TOP_N = int(os.getenv("TOP_N", 3))

# -------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
# -------------------------
try:
    model = joblib.load(MODEL_PATH)
    preprocessor = joblib.load(PREPROCESSOR_PATH)
    fixtures_df = pd.read_csv(FIXTURES_PATH)
    logger.info("‚úÖ –ú–æ–¥–µ–ª—å, –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
except Exception as e:
    logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: {e}")
    raise RuntimeError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏.")


# -------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
# -------------------------
def recommend_luminaires(input_data):
    try:
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ (Pydantic v1/v2/dict)
        if hasattr(input_data, "model_dump"):
            data = input_data.model_dump(by_alias=True)
        elif hasattr(input_data, "dict"):
            data = input_data.dict(by_alias=True)
        else:
            data = input_data

        df_input = pd.DataFrame([data])

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if "budget_rub" in df_input.columns:
            df_input["–±—é–¥–∂–µ—Ç_‚ÇΩ"] = df_input.pop("budget_rub")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        E = df_input["—Ü–µ–ª–µ–≤–æ–π_–ª—é–∫—Å"].iloc[0]
        S = df_input["–ø–ª–æ—â–∞–¥—å_–º2"].iloc[0]
        Œ∑ = 0.6  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–≤–µ—Ç–∞
        –±—é–¥–∂–µ—Ç = df_input["–±—é–¥–∂–µ—Ç_‚ÇΩ"].iloc[0]

        # ----------------------------------------
        # –†–∞—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ –ø–æ—Ç–æ–∫—É
        # ----------------------------------------
        fixtures_expanded = fixtures_df.copy()
        for col in df_input.columns:
            fixtures_expanded[col] = df_input.iloc[0][col]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–±–æ—Ä–æ–≤
        fixtures_expanded["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤"] = np.ceil(
            (E * S) / (fixtures_expanded["—Å–≤–µ—Ç–æ–≤–æ–π_–ø–æ—Ç–æ–∫_–ª–º"] * Œ∑)
        ).clip(lower=1).astype(int)

        # ----------------------------------------
        # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –º–æ–¥–µ–ª–∏
        # ----------------------------------------
        X_processed = preprocessor.transform(fixtures_expanded)
        y_pred = model.predict(X_processed)
        fixtures_expanded["–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è_–æ—Ü–µ–Ω–∫–∞"] = y_pred

        # ----------------------------------------
        # –ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã
        # ----------------------------------------
        fixtures_expanded["–∏—Ç–æ–≥–æ–≤–∞—è_–º–æ—â–Ω–æ—Å—Ç—å_–≤—Ç"] = (
            fixtures_expanded["–º–æ—â–Ω–æ—Å—Ç—å_–≤—Ç"] * fixtures_expanded["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤"]
        ).round(1)
        fixtures_expanded["–∏—Ç–æ–≥–æ–≤–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å_‚ÇΩ"] = (
            fixtures_expanded["—Ü–µ–Ω–∞_‚ÇΩ"] * fixtures_expanded["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤"]
        ).round(2)

        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å (–ª–∫)
        fixtures_expanded["–æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å_–ª–∫"] = (
            (fixtures_expanded["—Å–≤–µ—Ç–æ–≤–æ–π_–ø–æ—Ç–æ–∫_–ª–º"] *
             fixtures_expanded["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤"] *
             Œ∑) / S
        ).round(1)

        # –î–æ–ª—è –æ—Ç –±—é–¥–∂–µ—Ç–∞
        fixtures_expanded["–¥–æ–ª—è_–±—é–¥–∂–µ—Ç–∞_%"] = (
            fixtures_expanded["–∏—Ç–æ–≥–æ–≤–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å_‚ÇΩ"] / –±—é–¥–∂–µ—Ç * 100
        ).round(1)

        # –û—Ü–µ–Ω–∫–∞ –ø–µ—Ä–µ—Å–≤–µ—Ç–∞/–Ω–µ–¥–æ—Å–≤–µ—Ç–∞
        fixtures_expanded["—É—Ä–æ–≤–µ–Ω—å_–æ—Å–≤–µ—â–µ–Ω–∏—è"] = np.where(
            fixtures_expanded["–æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å_–ª–∫"] > E * 1.2, "–ø–µ—Ä–µ—Å–≤–µ—Ç",
            np.where(fixtures_expanded["–æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å_–ª–∫"] < E * 0.8, "–Ω–µ–¥–æ—Å–≤–µ—Ç", "–Ω–æ—Ä–º–∞")
        )

        # ----------------------------------------
        # –í—ã–±–æ—Ä top-N
        # ----------------------------------------
        top_recs = fixtures_expanded.sort_values(by="–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è_–æ—Ü–µ–Ω–∫–∞", ascending=False).head(TOP_N)

        # –ü–æ–ª—è –¥–ª—è –≤—ã–≤–æ–¥–∞
        results = top_recs[[
            "—Ç–∏–ø_—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞", "–±—Ä–µ–Ω–¥", "—Å–µ—Ä–∏—è",
            "–º–æ—â–Ω–æ—Å—Ç—å_–≤—Ç", "—Å–≤–µ—Ç–æ–≤–æ–π_–ø–æ—Ç–æ–∫_–ª–º", "—Ü–µ–Ω–∞_‚ÇΩ",
            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤", "–∏—Ç–æ–≥–æ–≤–∞—è_–º–æ—â–Ω–æ—Å—Ç—å_–≤—Ç",
            "–∏—Ç–æ–≥–æ–≤–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å_‚ÇΩ", "–æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å_–ª–∫", "—É—Ä–æ–≤–µ–Ω—å_–æ—Å–≤–µ—â–µ–Ω–∏—è",
            "–¥–æ–ª—è_–±—é–¥–∂–µ—Ç–∞_%", "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è_–æ—Ü–µ–Ω–∫–∞"
        ]].to_dict(orient="records")

        # ----------------------------------------
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π summary
        # ----------------------------------------
        summary_lines = []
        for r in results:
            line = (
                f"üí° {r['–±—Ä–µ–Ω–¥']} {r['—Ç–∏–ø_—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∞']} ({r['—Å–µ—Ä–∏—è']}) ‚Äî "
                f"{r['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤']} —à—Ç., "
                f"‚âà{r['–æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å_–ª–∫']} –ª–∫ ({r['—É—Ä–æ–≤–µ–Ω—å_–æ—Å–≤–µ—â–µ–Ω–∏—è']}), "
                f"—Å—Ç–æ–∏–º–æ—Å—Ç—å {r['–∏—Ç–æ–≥–æ–≤–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å_‚ÇΩ']} ‚ÇΩ "
                f"({r['–¥–æ–ª—è_–±—é–¥–∂–µ—Ç–∞_%']}% –±—é–¥–∂–µ—Ç–∞)."
            )
            summary_lines.append(line)

        summary = "\n".join(summary_lines)

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(results)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
        return {"recommendations": results, "summary": summary}

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {e}")
        return {"error": str(e)}
