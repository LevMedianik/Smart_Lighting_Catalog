# ==============================================================
# AI-—Å–æ–≤–µ—Ç–Ω–∏–∫ (—á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SpaCy
# –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–º–µ—â–µ–Ω–∏—è –∏ –≤—ã–∑–æ–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
# ==============================================================

from fastapi import APIRouter, HTTPException
from app.spacy_parser import parse_room_params_spacy
from app.recommend import recommend_luminaires as recommend
from app.advisor import generate_advice
from pydantic import BaseModel
import logging

router = APIRouter()
logger = logging.getLogger(__name__)


# --------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# --------------------------------------------------------------
class ChatRequest(BaseModel):
    message: str

@router.post("/chat/")
async def chat(request: ChatRequest):
    message = request.message  # ‚Üê –¥–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–ª–∞ JSON
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ SpaCy,
    –≤—ã–∑—ã–≤–∞–µ—Ç recommend() –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç —á–µ—Ä–µ–∑ generate_advice().
    """
    try:
        logger.info("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}")

        # üîπ 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–º–µ—â–µ–Ω–∏—è (SpaCy)
        parsed = parse_room_params_spacy(message)
        logger.info(f"üß© –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {parsed}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if not parsed or not isinstance(parsed, dict):
            raise ValueError("–ü–∞—Ä—Å–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

        # üîπ 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç ML-–º–æ–¥—É–ª—è
        rec_result = recommend(parsed)
        if not rec_result:
            logger.warning("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return {
                "user_query": message,
                "parsed_params": parsed,
                "summary": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                "advice": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —É–∫–∞–∑–∞–Ω—ã –ª–∏ –ø–ª–æ—â–∞–¥—å, –≤—ã—Å–æ—Ç–∞ –∏ –±—é–¥–∂–µ—Ç."
            }

        recommendations = rec_result.get("recommendations", [])
        summary = rec_result.get("summary", "")

        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")

        # üîπ 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–≤–µ—Ç–∞
        advice_text = generate_advice(recommendations, parsed)
        logger.info("üí¨ –°–æ–≤–µ—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.")

        # üîπ 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        result = {
            "user_query": message,
            "parsed_params": parsed,
            "summary": summary,
            "advice": advice_text
        }

        logger.info("üéØ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –≤–æ–∑–≤—Ä–∞—â—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        logger.info("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        return result

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞:")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞: {e}")
