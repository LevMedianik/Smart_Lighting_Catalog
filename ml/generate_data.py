# ==============================================================
# ЭТАП 1. ГЕНЕРАЦИЯ ДАННЫХ
# --------------------------------------------------------------
# Назначение:
#   Создание синтетической обучающей выборки "помещение × светильник"
#   для рекомендательной ML-системы подбора световых решений.
#
# Особенности:
#   - Расширенные нормативы (СП/СНиП/ГОСТ) в разумных диапазонах
#   - Связи "тип помещения ↔ типы светильников"
#   - Доп. параметры: CRI, CCT, IP, световая отдача, срок службы
#   - Генерация сценариев, продуктов и пар с таргетом "оценка_пригодности"
#   - Сохранение в PostgreSQL (три таблицы)
# ==============================================================

# -------------------------
# Импорт модулей
# -------------------------
import os
import uuid
import random
import numpy as np
import pandas as pd
from dotenv import load_dotenv

# -------------------------
# Инициализация
# -------------------------
load_dotenv()
random.seed(42)
np.random.seed(42)

# Подключение к БД (PostgreSQL)
DATABASE_URL = os.getenv(
    "DATABASE_URL",
    "postgresql+psycopg2://postgres:postgres@localhost:5432/lighting"
)

# ==============================================================
# НОРМАТИВЫ И СВЯЗИ (РУССКАЯ ТЕРМИНОЛОГИЯ)
# ==============================================================

# -------------------------
# 1) Нормативы освещённости, CCT, CRI, IP по типам помещений
#    Диапазоны расширены (на основе СП 52.13330/СанПиН/ГОСТ в практичных границах)
# -------------------------

ROOM_RULES = {
    "балкон/лоджия": {"люкс": (75, 200), "cct_k": (3000, 4000), "cri_min": (70, 85), "ip_min": (44, 65), "ugr_max": 22, "area_m2": (3, 20), "height_m": (2.4, 3.0)},
    "бар": {"люкс": (100, 200), "cct_k": (2700, 3000), "cri_min": (85, 95), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (30, 200), "height_m": (2.7, 4.5)},
    "библиотека зал": {"люкс": (400, 750), "cct_k": (3500, 4500), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 19, "area_m2": (30, 300), "height_m": (2.8, 4.5)},
    "вестибюль": {"люкс": (200, 300), "cct_k": (3000, 4000), "cri_min": (70, 80), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (20, 300), "height_m": (2.7, 5.0)},
    "горячий цех": {"люкс": (300, 500), "cct_k": (3500, 4500), "cri_min": (80, 90), "ip_min": (44, 54), "ugr_max": 22, "area_m2": (15, 150), "height_m": (2.7, 4.5)},
    "гостиная": {"люкс": (150, 300), "cct_k": (2700, 3500), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (12, 60), "height_m": (2.5, 3.2)},
    "дискотека": {"люкс": (100, 300), "cct_k": (2700, 4000), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 25, "area_m2": (60, 800), "height_m": (3.0, 6.0)},
    "зона прихожей": {"люкс": (150, 300), "cct_k": (3000, 4000), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (4, 20), "height_m": (2.4, 3.0)},
    "кондитерский цех": {"люкс": (500, 750), "cct_k": (4000, 5000), "cri_min": (85, 95), "ip_min": (44, 54), "ugr_max": 22, "area_m2": (20, 150), "height_m": (2.8, 4.5)},
    "конференц зал": {"люкс": (300, 500), "cct_k": (3500, 4500), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 19, "area_m2": (40, 400), "height_m": (2.8, 5.0)},
    "коридор": {"люкс": (50, 200), "cct_k": (3000, 4000), "cri_min": (70, 80), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (10, 150), "height_m": (2.5, 4.0)},
    "кухня домашняя": {"люкс": (300, 500), "cct_k": (3500, 4500), "cri_min": (85, 95), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (8, 40), "height_m": (2.4, 3.0)},
    "лекционная аудитория": {"люкс": (400, 500), "cct_k": (3500, 4500), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 19, "area_m2": (40, 300), "height_m": (3.0, 6.0)},
    "мастерская по дереву": {"люкс": (300, 500), "cct_k": (4000, 5000), "cri_min": (80, 90), "ip_min": (40, 60), "ugr_max": 22, "area_m2": (30, 300), "height_m": (3.0, 6.0)},
    "мастерская по металлу": {"люкс": (500, 750), "cct_k": (4000, 5000), "cri_min": (80, 90), "ip_min": (40, 60), "ugr_max": 22, "area_m2": (30, 300), "height_m": (3.0, 6.0)},
    "медицинская лаборатория": {"люкс": (500, 1000), "cct_k": (4000, 6500), "cri_min": (85, 95), "ip_min": (40, 60), "ugr_max": 19, "area_m2": (15, 200), "height_m": (2.7, 4.5)},
    "моечное отделение": {"люкс": (200, 300), "cct_k": (4000, 5000), "cri_min": (80, 90), "ip_min": (54, 65), "ugr_max": 22, "area_m2": (10, 100), "height_m": (2.7, 4.0)},
    "мясной цех": {"люкс": (500, 750), "cct_k": (4000, 5000), "cri_min": (85, 95), "ip_min": (54, 65), "ugr_max": 22, "area_m2": (20, 200), "height_m": (2.8, 4.5)},
    "ночной клуб": {"люкс": (100, 300), "cct_k": (2700, 4000), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 25, "area_m2": (80, 1200), "height_m": (3.0, 8.0)},
    "обеденный зал закусочной": {"люкс": (200, 300), "cct_k": (3000, 4000), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (20, 200), "height_m": (2.7, 4.0)},
    "обеденный зал кафе": {"люкс": (200, 300), "cct_k": (2700, 3500), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (30, 300), "height_m": (2.7, 4.5)},
    "обеденный зал ресторана": {"люкс": (200, 300), "cct_k": (2700, 3500), "cri_min": (85, 95), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (40, 400), "height_m": (2.7, 5.0)},
    "обеденный зал столовой": {"люкс": (200, 300), "cct_k": (3000, 4000), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (30, 400), "height_m": (2.7, 4.5)},
    "овощной цех": {"люкс": (300, 500), "cct_k": (3500, 4500), "cri_min": (80, 90), "ip_min": (44, 54), "ugr_max": 22, "area_m2": (15, 150), "height_m": (2.7, 4.5)},
    "офисное помещение": {"люкс": (300, 500), "cct_k": (3500, 4500), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 19, "area_m2": (12, 250), "height_m": (2.5, 4.0)},
    "палата больницы": {"люкс": (150, 300), "cct_k": (3500, 4500), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (10, 100), "height_m": (2.5, 4.0)},
    "производственная лаборатория": {"люкс": (300, 750), "cct_k": (4000, 5000), "cri_min": (80, 90), "ip_min": (40, 60), "ugr_max": 22, "area_m2": (30, 300), "height_m": (3.0, 6.0)},
    "производственный цех общий": {"люкс": (300, 1000), "cct_k": (4000, 5000), "cri_min": (75, 90), "ip_min": (40, 60), "ugr_max": 25, "area_m2": (50, 800), "height_m": (3.5, 8.0)},
    "процедурный кабинет": {"люкс": (500, 1000), "cct_k": (4000, 6500), "cri_min": (85, 95), "ip_min": (40, 60), "ugr_max": 19, "area_m2": (12, 80), "height_m": (2.7, 4.0)},
    "рыбный цех": {"люкс": (500, 750), "cct_k": (4000, 5000), "cri_min": (85, 95), "ip_min": (54, 65), "ugr_max": 22, "area_m2": (20, 200), "height_m": (2.8, 4.5)},
    "санузел": {"люкс": (150, 300), "cct_k": (3000, 4000), "cri_min": (80, 90), "ip_min": (44, 54), "ugr_max": 22, "area_m2": (4, 20), "height_m": (2.4, 3.0)},
    "серверная": {"люкс": (200, 300), "cct_k": (4000, 5000), "cri_min": (80, 90), "ip_min": (40, 60), "ugr_max": 22, "area_m2": (10, 80), "height_m": (2.5, 4.0)},
    "склад": {"люкс": (100, 300), "cct_k": (4000, 5000), "cri_min": (70, 80), "ip_min": (40, 65), "ugr_max": 25, "area_m2": (50, 1000), "height_m": (4.0, 12.0)},
    "спальня": {"люкс": (100, 200), "cct_k": (2700, 3500), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (10, 40), "height_m": (2.4, 3.0)},
    "столовая обеденный зал": {"люкс": (200, 300), "cct_k": (3000, 4000), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 22, "area_m2": (30, 400), "height_m": (2.7, 4.5)},
    "торговый зал": {"люкс": (400, 750), "cct_k": (3500, 4500), "cri_min": (80, 90), "ip_min": (30, 50), "ugr_max": 22, "area_m2": (50, 1000), "height_m": (3.0, 6.0)},
    "химическая лаборатория": {"люкс": (500, 1000), "cct_k": (4000, 6500), "cri_min": (85, 95), "ip_min": (40, 60), "ugr_max": 19, "area_m2": (20, 200), "height_m": (3.0, 4.5)},
    "хлебопекарня": {"люкс": (300, 500), "cct_k": (3500, 4500), "cri_min": (80, 90), "ip_min": (54, 65), "ugr_max": 22, "area_m2": (30, 200), "height_m": (2.7, 4.5)},
    "холодный цех": {"люкс": (300, 500), "cct_k": (3500, 4500), "cri_min": (80, 90), "ip_min": (44, 54), "ugr_max": 22, "area_m2": (15, 150), "height_m": (2.7, 4.5)},
    "экспозиция музея": {"люкс": (200, 400), "cct_k": (3000, 4000), "cri_min": (90, 95), "ip_min": (20, 40), "ugr_max": 19, "area_m2": (40, 600), "height_m": (3.0, 6.0)},
    "школьный класс": {"люкс": (400, 500), "cct_k": (3500, 4500), "cri_min": (80, 90), "ip_min": (20, 40), "ugr_max": 19, "area_m2": (20, 150), "height_m": (2.8, 4.5)}
}

# -------------------------
# 2) Связи: помещение → допустимые типы светильников
#    (наследие из прошлой работы, дополнено)
# -------------------------
ROOM_TO_FIXTURES = {
    "балкон/лоджия": ["потолочный накладной", "настенный накладной"],
    "бар": ["потолочный подвесной", "потолочный трековый спот", "потолочный люстра", "настенный бра"],
    "библиотека зал": ["потолочный панель", "потолочный линейный", "потолочный даунлайт"],
    "вестибюль": ["потолочный панель", "потолочный даунлайт", "потолочный трековый спот", "настенный бра"],
    "горячий цех": ["потолочный линейный", "потолочный магистральный", "потолочный накладной"],
    "гостиная": ["потолочный люстра", "потолочный даунлайт", "настенный бра", "напольный торшер"],
    "дискотека": ["потолочный прожектор", "потолочный трековый спот", "потолочный подвесной"],
    "зона прихожей": ["потолочный накладной", "потолочный даунлайт", "настенный бра"],
    "кондитерский цех": ["потолочный линейный", "потолочный магистральный", "потолочный накладной"],
    "конференц зал": ["потолочный панель", "потолочный подвесной", "потолочный даунлайт"],
    "коридор": ["потолочный магистральный", "потолочный накладной", "потолочный линейный"],
    "кухня домашняя": ["потолочный накладной", "потолочный даунлайт", "потолочный трековый спот", "потолочный подвесной"],
    "лекционная аудитория": ["потолочный панель", "потолочный подвесной", "потолочный линейный"],
    "мастерская по дереву": ["потолочный линейный", "потолочный магистральный", "потолочный high bay"],
    "мастерская по металлу": ["потолочный линейный", "потолочный магистральный", "потолочный high bay"],
    "медицинская лаборатория": ["потолочный панель", "потолочный линейный", "потолочный даунлайт"],
    "моечное отделение": ["потолочный накладной", "потолочный линейный", "потолочный магистральный"],
    "мясной цех": ["потолочный линейный", "потолочный магистральный", "потолочный накладной"],
    "ночной клуб": ["потолочный прожектор", "потолочный трековый спот", "потолочный подвесной"],
    "обеденный зал закусочной": ["потолочный подвесной", "потолочный трековый спот", "потолочный люстра"],
    "обеденный зал кафе": ["потолочный подвесной", "потолочный трековый спот", "потолочный люстра"],
    "обеденный зал ресторана": ["потолочный подвесной", "потолочный трековый спот", "потолочный люстра", "настенный бра"],
    "обеденный зал столовой": ["потолочный подвесной", "потолочный панель", "потолочный линейный"],
    "овощной цех": ["потолочный линейный", "потолочный магистральный", "потолочный накладной"],
    "офисное помещение": ["потолочный панель", "потолочный линейный", "потолочный даунлайт", "потолочный трековый спот"],
    "палата больницы": ["потолочный панель", "потолочный даунлайт", "настенный бра"],
    "производственная лаборатория": ["потолочный линейный", "потолочный магистральный", "потолочный накладной"],
    "производственный цех общий": ["потолочный high bay", "потолочный магистральный", "потолочный линейный"],
    "процедурный кабинет": ["потолочный панель", "потолочный даунлайт", "потолочный линейный"],
    "рыбный цех": ["потолочный линейный", "потолочный магистральный", "потолочный накладной"],
    "санузел": ["потолочный накладной", "потолочный даунлайт", "настенный накладной"],
    "серверная": ["потолочный панель", "потолочный линейный", "потолочный накладной"],
    "склад": ["потолочный high bay", "потолочный магистральный", "потолочный линейный"],
    "спальня": ["потолочный люстра", "потолочный даунлайт", "настенный бра", "напольный торшер"],
    "столовая обеденный зал": ["потолочный подвесной", "потолочный панель", "потолочный линейный"],
    "торговый зал": ["потолочный трековый спот", "потолочный панель", "потолочный подвесной"],
    "химическая лаборатория": ["потолочный панель", "потолочный линейный", "потолочный даунлайт"],
    "хлебопекарня": ["потолочный линейный", "потолочный магистральный", "потолочный накладной"],
    "холодный цех": ["потолочный линейный", "потолочный магистральный", "потолочный накладной"],
    "экспозиция музея": ["потолочный трековый спот", "потолочный прожектор", "потолочный даунлайт"],
    "школьный класс": ["потолочный панель", "потолочный подвесной", "потолочный линейный"]
}

# -------------------------
# 3) Диапазоны параметров по типам светильников (мощность, поток, цена и др.)
# -------------------------

FIXTURE_SPECIFICATIONS = { 
    "потолочный панель": {"мощность_вт": (18, 60), "поток_лм": (1800, 6600), "эффективность_лм_вт": (90, 120), "цена_₽": (800, 4000), "угол_град": (90, 120)},
    "потолочный линейный": {"мощность_вт": (20, 80), "поток_лм": (2000, 8800), "эффективность_лм_вт": (90, 130), "цена_₽": (900, 5000), "угол_град": (90, 120)},
    "потолочный магистральный": {"мощность_вт": (40, 150), "поток_лм": (4000, 16500), "эффективность_лм_вт": (95, 135), "цена_₽": (1500, 7000), "угол_град": (90, 120)},
    "потолочный high bay": {"мощность_вт": (80, 250), "поток_лм": (8000, 34000), "эффективность_лм_вт": (100, 140), "цена_₽": (3500, 15000), "угол_град": (60, 120)},
    "потолочный накладной": {"мощность_вт": (10, 40), "поток_лм": (900, 3600), "эффективность_лм_вт": (85, 110), "цена_₽": (600, 3000), "угол_град": (90, 120)},
    "потолочный даунлайт": {"мощность_вт": (7, 30), "поток_лм": (700, 3300), "эффективность_лм_вт": (85, 115), "цена_₽": (400, 2500), "угол_град": (60, 110)},
    "потолочный подвесной": {"мощность_вт": (15, 80), "поток_лм": (1500, 8800), "эффективность_лм_вт": (90, 125), "цена_₽": (1200, 6000), "угол_град": (60, 120)},
    "потолочный трековый спот": {"мощность_вт": (10, 50), "поток_лм": (900, 5500), "эффективность_лм_вт": (85, 115), "цена_₽": (900, 4500), "угол_град": (15, 60)},
    "потолочный люстра": {"мощность_вт": (20, 120), "поток_лм": (2000, 9000), "эффективность_лм_вт": (70, 100), "цена_₽": (1500, 20000), "угол_град": (120, 360)},
    "потолочный прожектор": {"мощность_вт": (20, 300), "поток_лм": (2000, 36000), "эффективность_лм_вт": (90, 140), "цена_₽": (1000, 15000), "угол_град": (15, 120)},
    "настенный бра": {"мощность_вт": (5, 30), "поток_лм": (400, 3000), "эффективность_лм_вт": (70, 100), "цена_₽": (600, 4000), "угол_град": (90, 180)},
    "настенный накладной": {"мощность_вт": (10, 50), "поток_лм": (800, 4000), "эффективность_лм_вт": (80, 110), "цена_₽": (800, 3500), "угол_град": (90, 120)},
    "напольный торшер": {"мощность_вт": (10, 60), "поток_лм": (900, 5200), "эффективность_лм_вт": (80, 100), "цена_₽": (1000, 10000), "угол_град": (90, 180)}
}

# -------------------------
# 4) Марки/бренды по типам светильников
# -------------------------
# -------------------------
# 4) Марки/бренды по типам светильников
# -------------------------

BRAND_TYPES = {
    "потолочный панель": ["Lumitec", "Arlight", "Jazzway", "ERA", "Gauss", "Feron"],
    "потолочный линейный": ["Arlight", "IEK", "Gauss", "Uniel", "Volpe", "Navigator"],
    "потолочный магистральный": ["Arlight", "IEK", "Philips", "Osram", "Navigator"],
    "потолочный high bay": ["Philips", "Osram", "Arlight", "Gauss", "Navigator"],
    "потолочный накладной": ["ERA", "Uniel", "Arlight", "Feron", "IEK"],
    "потолочный даунлайт": ["Gauss", "Arlight", "Feron", "ERA", "Volpe"],
    "потолочный подвесной": ["Arlight", "Philips", "Feron", "Osram", "Gauss"],
    "потолочный трековый спот": ["Arlight", "Gauss", "Uniel", "Philips", "Jazzway"],
    "потолочный люстра": ["Gauss", "Arlight", "Feron", "Odeon Light", "Lightstar"],
    "потолочный прожектор": ["Philips", "Osram", "Arlight", "Gauss", "Navigator"],
    "настенный бра": ["Odeon Light", "Arlight", "Feron", "Gauss", "Lightstar"],
    "настенный накладной": ["Arlight", "Gauss", "ERA", "Uniel", "Navigator"],
    "напольный торшер": ["Odeon Light", "Gauss", "Feron", "Lightstar", "Arlight"]
}

# -------------------------
# 5) Общие распределения CRI, CCT, IP по типам светильников
#    (для генерации продуктовых параметров)
# -------------------------
QUALITY_PARAMS = {
    "потолочный панель": {"cri": (80, 95), "cct_k": (3500, 5000), "ip": (20, 44), "срок_службы_ч": (30000, 70000)},
    "потолочный линейный": {"cri": (80, 90), "cct_k": (3500, 5000), "ip": (20, 54), "срок_службы_ч": (30000, 70000)},
    "потолочный магистральный": {"cri": (80, 90), "cct_k": (4000, 5000), "ip": (40, 65), "срок_службы_ч": (40000, 80000)},
    "потолочный high bay": {"cri": (75, 90), "cct_k": (4000, 6500), "ip": (40, 65), "срок_службы_ч": (50000, 90000)},
    "потолочный накладной": {"cri": (80, 90), "cct_k": (3000, 4500), "ip": (20, 44), "срок_службы_ч": (30000, 60000)},
    "потолочный даунлайт": {"cri": (80, 95), "cct_k": (2700, 4500), "ip": (20, 44), "срок_службы_ч": (30000, 60000)},
    "потолочный подвесной": {"cri": (80, 90), "cct_k": (3000, 4500), "ip": (20, 44), "срок_службы_ч": (35000, 65000)},
    "потолочный трековый спот": {"cri": (85, 95), "cct_k": (2700, 4000), "ip": (20, 40), "срок_службы_ч": (30000, 60000)},
    "потолочный люстра": {"cri": (80, 90), "cct_k": (2700, 3500), "ip": (20, 30), "срок_службы_ч": (20000, 40000)},
    "потолочный прожектор": {"cri": (80, 95), "cct_k": (3000, 6500), "ip": (40, 65), "срок_службы_ч": (40000, 80000)},
    "настенный бра": {"cri": (80, 90), "cct_k": (2700, 4000), "ip": (20, 30), "срок_службы_ч": (25000, 50000)},
    "настенный накладной": {"cri": (80, 90), "cct_k": (3000, 4500), "ip": (44, 65), "срок_службы_ч": (35000, 60000)},
    "напольный торшер": {"cri": (80, 90), "cct_k": (2700, 4000), "ip": (20, 30), "срок_службы_ч": (20000, 40000)}
}

# ==============================================================
# ФУНКЦИИ ГЕНЕРАЦИИ
# ==============================================================

import pandas as pd
import numpy as np
import random
import uuid
from sqlalchemy import create_engine

# ==============================================================
# 1) Генерация сценариев помещений
# ==============================================================

def generate_rooms(n_records: int = 300) -> pd.DataFrame:
    """Генерация сценариев помещений с параметрами по ROOM_RULES"""
    records = []
    for _ in range(n_records):
        room_type = random.choice(list(ROOM_RULES.keys()))
        rules = ROOM_RULES[room_type]

        area_m2 = round(random.uniform(*rules["area_m2"]), 1)
        height_m = round(random.uniform(*rules["height_m"]), 1)
        target_lux = int(np.random.normal(np.mean(rules["люкс"]), (rules["люкс"][1] - rules["люкс"][0]) / 6))
        target_lux = int(np.clip(target_lux, rules["люкс"][0], rules["люкс"][1]))

        budget_rub = int(random.uniform(20000, 500000))
        cri_min = random.randint(*rules["cri_min"])
        cct_pref = int(random.choice([rules["cct_k"][0], int(np.mean(rules["cct_k"])), rules["cct_k"][1]]))
        ip_min = random.randint(*rules["ip_min"])

        records.append({
            "id_сценария": str(uuid.uuid4()),
            "тип_помещения": room_type,
            "площадь_м2": area_m2,
            "высота_м": height_m,
            "целевой_люкс": target_lux,
            "бюджет_₽": budget_rub,
            "cri_min": cri_min,
            "cct_предпочтение_k": cct_pref,
            "ip_min": ip_min,
            "ugr_предел": rules["ugr_max"]
        })
    return pd.DataFrame(records)


# ==============================================================
# 2) Генерация светильников
# ==============================================================

def potok_na_vatt(potok_lm: float, moshchnost_vt: float) -> float:
    """Расчёт световой эффективности"""
    return 0.0 if moshchnost_vt <= 0 else potok_lm / moshchnost_vt


def generate_products(n_records: int = 200) -> pd.DataFrame:
    """Генерация характеристик светильников"""
    records = []
    all_types = list(FIXTURE_SPECIFICATIONS.keys())

    # Префиксы по типу светильника для серийных номеров
    TYPE_CODES = {
        "панель": "PL", "линейный": "LN", "магистральный": "MG", "high bay": "HB",
        "накладной": "NK", "даунлайт": "DL", "подвесной": "PD", "трековый спот": "TS",
        "люстра": "LS", "прожектор": "PJ", "бра": "BR", "настенный накладной": "NN", "торшер": "TR"
    }

    for _ in range(n_records):
        ftype = random.choice(all_types)
        spec = FIXTURE_SPECIFICATIONS[ftype]
        qual = QUALITY_PARAMS[ftype]
        brands = BRAND_TYPES.get(ftype, ["Generic"])

        power = round(random.uniform(*spec["мощность_вт"]), 2)
        flux = round(random.uniform(*spec["поток_лм"]), 1)
        efficacy = round(np.clip(potok_na_vatt(flux, power), *spec["эффективность_лм_вт"]), 1)
        angle = int(random.uniform(*spec["угол_град"]))
        cri = int(random.uniform(*qual["cri"]))
        cct = int(random.uniform(*qual["cct_k"]))
        ip = int(random.uniform(*qual["ip"]))
        lifetime = int(random.uniform(*qual["срок_службы_ч"]))
        price = round(random.uniform(*spec["цена_₽"]), 2)

        brand = random.choice(brands)

        # Генерация уникального серийного номера
        short_type = ftype.split()[-1]  # пример: "панель", "даунлайт"
        code_prefix = TYPE_CODES.get(short_type, "XX")
        series = f"{brand}-{code_prefix}{random.randint(10000,99999)}"

        records.append({
            "id_продукта": str(uuid.uuid4()),
            "тип_светильника": ftype,
            "бренд": brand,
            "серия": series,
            "мощность_вт": power,
            "световой_поток_лм": flux,
            "эффективность_лм_вт": efficacy,
            "угол_раскрытия_град": angle,
            "cri": cri,
            "cct_k": cct,
            "ip": ip,
            "срок_службы_ч": lifetime,
            "цена_₽": price
        })

    return pd.DataFrame(records)



# ==============================================================
# 3) Формирование пар (сценарий × продукт) и расчёт таргета
# ==============================================================

def generate_pairs(df_rooms: pd.DataFrame, df_products: pd.DataFrame) -> pd.DataFrame:
    """Формирование обучающих пар 'сценарий × продукт' с расчётом метрики пригодности"""
    pairs = []
    products_by_type = {t: df_products[df_products["тип_светильника"] == t] for t in FIXTURE_SPECIFICATIONS.keys()}

    for _, room in df_rooms.iterrows():
        allowed = ROOM_TO_FIXTURES.get(room.тип_помещения, [])
        candidates = [products_by_type[t] for t in allowed if t in products_by_type]
        if not candidates:
            continue

        candidates_df = pd.concat(candidates, ignore_index=True)

        for _, prod in candidates_df.iterrows():
            score = 100.0

            # 1. Отклонение CCT от предпочтения
            score -= abs(room.cct_предпочтение_k - prod.cct_k) / 100.0

            # 2. Несоответствие CRI и IP
            score -= max(0, room.cri_min - prod.cri) * 0.6
            score -= max(0, room.ip_min - prod.ip) * 0.4

            # 3. Влияние бюджета
            # Нормализованная стоимость (если дороже бюджета — штраф)
            cost_ratio = (prod["цена_₽"] * max(1.0, room["площадь_м2"] / 12.0)) / max(1.0, room["бюджет_₽"])
            if cost_ratio > 1.0:
                score -= (cost_ratio - 1.0) * 25.0

            # 4. Учет UGR (направленные узкие углы в офисах/аудиториях)
            if room["ugr_предел"] <= 19 and prod["угол_раскрытия_град"] < 40:
                score -= 2.0

            # 5. Добавление небольшого шума
            score = float(np.clip(score + np.random.normal(0, 2), 0, 100))

            # 6. Расчёт необходимого количества светильников (инженерное приближение)
            UF = 0.7   # коэффициент использования света
            MF = 0.85  # коэффициент запаса
            req_flux = room.целевой_люкс * room.площадь_м2  # требуемый суммарный поток
            single_flux = max(1.0, prod.световой_поток_лм)
            count_units = int(np.clip(req_flux / (single_flux * UF * MF), 1, 500))  # ограничение для реалистичности

            pairs.append({
                "id_сценария": room["id_сценария"],
                "id_продукта": prod["id_продукта"],
                "тип_помещения": room["тип_помещения"],
                "тип_светильника": prod["тип_светильника"],
                "площадь_м2": room["площадь_м2"],
                "высота_м": room["высота_м"],
                "целевой_люкс": room["целевой_люкс"],
                "бюджет_₽": room["бюджет_₽"],
                "количество_светильников": count_units,
                "бренд": prod["бренд"],
                "cri_min": room["cri_min"],
                "cct_предпочтение_k": room["cct_предпочтение_k"],
                "ip_min": room["ip_min"],
                "угол_раскрытия_град": prod["угол_раскрытия_град"],
                "cri": prod["cri"],
                "cct_k": prod["cct_k"],
                "ip": prod["ip"],
                "срок_службы_ч": prod["срок_службы_ч"],
                "мощность_вт": prod["мощность_вт"],
                "световой_поток_лм": prod["световой_поток_лм"],
                "эффективность_лм_вт": prod["эффективность_лм_вт"],
                "цена_₽": prod["цена_₽"],
                "оценка_пригодности": round(score, 2)
            })

    return pd.DataFrame(pairs)


# ==============================================================
# 4) Сохранение в .csv
# ==============================================================

def save_to_csv(df: pd.DataFrame, filename: str, folder: str = "data") -> None:
    """Сохраняет DataFrame в CSV (создаёт папку, если её нет)"""
    os.makedirs(folder, exist_ok=True)
    path = os.path.join(folder, filename)
    df.to_csv(path, index=False, encoding="utf-8-sig")
    print(f"Файл '{path}' сохранён ({len(df)} строк).")


# ==============================================================
# 5) Запуск
# ==============================================================

if __name__ == "__main__":
    print("Генерация: сценарии помещений...")
    df_rooms = generate_rooms(n_records=400)

    print("Генерация: продукты (светильники)...")
    df_products = generate_products(n_records=240)

    print("Формирование обучающих пар...")
    df_pairs = generate_pairs(df_rooms, df_products)

    # Очистка от дубликатов
    df_rooms.drop_duplicates(subset=["id_сценария"], inplace=True)
    df_products.drop_duplicates(subset=["id_продукта"], inplace=True)
    df_pairs.drop_duplicates(subset=["id_сценария", "id_продукта"], inplace=True)

    # Сохранение в CSV
    print("Сохранение: CSV...")
    save_to_csv(df_rooms, "rooms.csv")
    save_to_csv(df_products, "fixtures.csv")
    save_to_csv(df_pairs, "training_dataset.csv")

    print("✅ Генерация данных завершена. Файлы сохранены в /data.")